{"version":3,"file":"static/js/139.81d3cab2.chunk.js","mappings":"yNAEaA,EAAYC,EAAAA,GAAAA,EAAH,iDACH,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGPC,EAAYJ,EAAAA,GAAAA,OAAH,2MAGT,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACE,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACE,SAAAF,GAAC,OAAIA,EAAEC,MAAMG,MAAMC,EAAlB,IAII,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,OAAOC,MAAnB,G,kKCJnBC,GAAYT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,uCAITW,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,SAASC,OAAOC,IAAI,GAAGC,IAAI,IAAIC,WAClDC,MAAOR,EAAAA,KAAaG,SAASC,OAAOI,QAAQD,WAC5CE,SAAUT,EAAAA,KAAaG,SAASC,OAAOC,IAAI,GAAGC,IAAI,IAAIC,aAGlDG,EAAgB,CACpBR,KAAM,GACNM,MAAO,GACPC,SAAU,IAGCE,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,KAAD,CACEH,cAAeA,EACfI,iBAAkBf,EAClBgB,SARiB,SAACC,EAAQC,GAC5BL,GAASM,EAAAA,EAAAA,KAAS,UAAKF,KACvBC,EAAQE,WACT,EAEC,UAKE,UAAC,KAAD,YACE,mBAAOC,QAAQ,OAAf,WACE,SAAC,IAAD,oBACA,SAAC,KAAD,CAAOC,aAAa,MAAMC,KAAK,OAAOpB,KAAK,UAC3C,SAACL,EAAD,CAAW0B,UAAU,IAAIrB,KAAK,aAEhC,mBAAOkB,QAAQ,QAAf,WACE,SAAC,IAAD,qBACA,SAAC,KAAD,CAAOE,KAAK,QAAQpB,KAAK,WACzB,SAACL,EAAD,CAAW0B,UAAU,IAAIrB,KAAK,cAEhC,mBAAOkB,QAAQ,WAAf,WACE,SAAC,IAAD,wBACA,SAAC,KAAD,CAAOE,KAAK,WAAWpB,KAAK,cAC5B,SAACL,EAAD,CAAW0B,UAAU,IAAIrB,KAAK,iBAEhC,SAAC,IAAD,CACEoB,KAAK,SADP,0BASP,ECtDD,EATqB,WACnB,OACE,4BACE,0CACA,SAACX,EAAD,MAGL,C","sources":["components/PhonebookForm/Phonebook.styled.js","components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LabelName = styled.p`\n  margin-bottom: ${p => p.theme.space[2]}px;\n`;\n\nexport const AddButton = styled.button`\n  display: flex;\n  justify-content: center;\n  padding: ${p => p.theme.space[3]}px;\n  margin-top: ${p => p.theme.space[4]}px;\n  border-radius: ${p => p.theme.radii.sm};\n  cursor: pointer;\n\n  &:active {\n    background-color: ${p => p.theme.colors.accent};\n  }\n`;\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport {\n  LabelName,\n  AddButton,\n} from 'components/PhonebookForm/Phonebook.styled';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n// import { useAuth } from 'hooks/useAuth';\n\nconst ErrorText = styled(ErrorMessage)`\n  color: red;\n`;\n\nconst schema = yup.object().shape({\n  name: yup.string().strict().trim().min(1).max(30).required(),\n  email: yup.string().strict().trim().email().required(),\n  password: yup.string().strict().trim().min(6).max(30).required(),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  // const loading = useSelector(selectLoading);\n  const handleSubmit = (values, actions) => {\n    dispatch(register({ ...values }));\n    actions.resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <label htmlFor=\"name\">\n          <LabelName>Name</LabelName>\n          <Field autoComplete=\"off\" type=\"text\" name=\"name\" />\n          <ErrorText component=\"p\" name=\"name\" />\n        </label>\n        <label htmlFor=\"email\">\n          <LabelName>Email</LabelName>\n          <Field type=\"email\" name=\"email\" />\n          <ErrorText component=\"p\" name=\"email\" />\n        </label>\n        <label htmlFor=\"password\">\n          <LabelName>Password</LabelName>\n          <Field type=\"password\" name=\"password\" />\n          <ErrorText component=\"p\" name=\"password\" />\n        </label>\n        <AddButton\n          type=\"submit\"\n          // disabled={loading}\n        >\n          Register\n        </AddButton>\n      </Form>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <div>\n      <p>Register form</p>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["LabelName","styled","p","theme","space","AddButton","radii","sm","colors","accent","ErrorText","ErrorMessage","schema","yup","shape","name","strict","trim","min","max","required","email","password","initialValues","RegisterForm","dispatch","useDispatch","validationSchema","onSubmit","values","actions","register","resetForm","htmlFor","autoComplete","type","component"],"sourceRoot":""}